generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Role {
//   roleId    String   @id @default(cuid())
//   name      String   @unique
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
//   users     User[]

//   @@map("roles")
//   @@index([roleId])
// }

// model User {
//   userId      String        @id @default(cuid())
//   username    String        @unique
//   email       String?       @unique
//   createdAt   DateTime      @default(now())
//   updatedAt   DateTime      @default(now())
//   roleId      String
//   role        Role          @relation(fields: [roleId], references: [roleId])
//   password    UserPassword?
//   builds      Build[]
//   comments    Comment[]
//   likes       Like[]

//   @@map("users")
//   @@index([userId, email, roleId])
// }

model Ability {
  abilityId   String    @id @default(cuid())
  name        String
  mana        Int
  description Int
  key         String
  heroId      String
  hero        Hero   @relation(fields: [heroId], references: [heroId])

  @@map("abilities")
  @@index([abilityId, heroId])
}

model Hero {
  heroId    String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  abilities Ability[]
  builds    Build[]

  @@map("heroes")
  @@index([name, heroId])
}

model Build {
  buildId      String      @id @default(cuid())
  name         String     @unique
  abilityOrder String[]
  items        String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  role         String
  heroId       String
  hero         Hero     @relation(fields: [heroId], references: [heroId])
  userId       String?
  // user         User?    @relation(fields: [userId], references: [userId])
  comments     Comment[]
  likes        Like[]

  @@map("builds")
  @@index([userId, buildId, heroId, name])
}

// model UserPassword {
//   userId       String    @id
//   passwordHash String
//   user         User      @relation(fields: [userId], references: [userId])  

//   @@map("userPasswords")
//   @@index([userId])
// }

model Comment {
  commentId    String   @id @default(cuid())
  content      String
  userId       String
  // user         User     @relation(fields: [userId], references: [userId])
  buildId      String
  build        Build    @relation(fields: [buildId], references: [buildId])

  @@map("comments")
  @@index([userId, buildId])
}

model Like {
  likeId       String   @id @default(cuid())
  userId       String
  // user         User     @relation(fields: [userId], references: [userId])
  buildId      String
  build        Build    @relation(fields: [buildId], references: [buildId])

  @@map("likes")
  @@index([userId, buildId])
}